// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: example.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ExampleService service

type ExampleService interface {
	GetExample(ctx context.Context, in *Example, opts ...client.CallOption) (*Example, error)
}

type exampleService struct {
	c    client.Client
	name string
}

func NewExampleService(name string, c client.Client) ExampleService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "exampleservice"
	}
	return &exampleService{
		c:    c,
		name: name,
	}
}

func (c *exampleService) GetExample(ctx context.Context, in *Example, opts ...client.CallOption) (*Example, error) {
	req := c.c.NewRequest(c.name, "ExampleService.GetExample", in)
	out := new(Example)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ExampleService service

type ExampleServiceHandler interface {
	GetExample(context.Context, *Example, *Example) error
}

func RegisterExampleServiceHandler(s server.Server, hdlr ExampleServiceHandler, opts ...server.HandlerOption) error {
	type exampleService interface {
		GetExample(ctx context.Context, in *Example, out *Example) error
	}
	type ExampleService struct {
		exampleService
	}
	h := &exampleServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ExampleService{h}, opts...))
}

type exampleServiceHandler struct {
	ExampleServiceHandler
}

func (h *exampleServiceHandler) GetExample(ctx context.Context, in *Example, out *Example) error {
	return h.ExampleServiceHandler.GetExample(ctx, in, out)
}
